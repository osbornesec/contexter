{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://schemas.contexter.dev/rag/v2",
  "title": "Contexter RAG System Data Schemas",
  "description": "Comprehensive data model definitions for the Contexter RAG system including validation rules, constraints, and relationships",
  "type": "object",
  "definitions": {
    "DocumentModel": {
      "$id": "#/definitions/DocumentModel",
      "title": "Document Model",
      "description": "Core document structure for RAG ingestion and storage",
      "type": "object",
      "required": ["document_id", "library_id", "content", "metadata", "status"],
      "properties": {
        "document_id": {
          "type": "string",
          "pattern": "^doc_[a-zA-Z0-9_-]{8,64}$",
          "description": "Unique document identifier with prefix",
          "examples": ["doc_fastapi_0.104.1", "doc_sqlalchemy_2.0.23"]
        },
        "library_id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]{1,100}$",
          "minLength": 1,
          "maxLength": 100,
          "description": "Library identifier following naming conventions",
          "examples": ["fastapi", "sqlalchemy", "pydantic"]
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+([.-][a-zA-Z0-9]+)*$",
          "maxLength": 50,
          "description": "Semantic version number",
          "examples": ["1.0.0", "2.1.3-beta.1", "0.104.1"]
        },
        "content": {
          "type": "object",
          "description": "Structured document content sections",
          "required": ["sections"],
          "properties": {
            "sections": {
              "type": "object",
              "patternProperties": {
                "^[a-zA-Z0-9_-]+$": {
                  "oneOf": [
                    {"type": "string"},
                    {"type": "object"}
                  ]
                }
              },
              "description": "Named sections of documentation",
              "examples": [{
                "introduction": "FastAPI is a modern web framework...",
                "api_reference": {
                  "endpoints": "..."
                }
              }]
            },
            "raw_text": {
              "type": "string",
              "description": "Original unstructured text content"
            },
            "markdown": {
              "type": "string",
              "description": "Markdown-formatted content"
            }
          },
          "additionalProperties": false
        },
        "metadata": {
          "$ref": "#/definitions/DocumentMetadata"
        },
        "status": {
          "type": "string",
          "enum": ["queued", "parsing", "chunking", "embedding", "storing", "completed", "failed", "archived"],
          "description": "Current processing status"
        },
        "processing_stats": {
          "$ref": "#/definitions/ProcessingStats"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp of creation"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp of last update"
        },
        "expires_at": {
          "type": ["string", "null"],
          "format": "date-time",
          "description": "Optional expiration timestamp for cached documents"
        },
        "file_path": {
          "type": "string",
          "format": "uri-reference",
          "description": "Original file path or URI"
        },
        "checksum": {
          "type": "string",
          "pattern": "^[a-f0-9]{64}$",
          "description": "SHA-256 checksum of original content"
        },
        "compression": {
          "type": "object",
          "properties": {
            "algorithm": {
              "type": "string",
              "enum": ["gzip", "brotli", "none"]
            },
            "original_size": {
              "type": "integer",
              "minimum": 0
            },
            "compressed_size": {
              "type": "integer",
              "minimum": 0
            },
            "ratio": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            }
          }
        }
      },
      "additionalProperties": false
    },

    "DocumentMetadata": {
      "$id": "#/definitions/DocumentMetadata",
      "title": "Document Metadata",
      "description": "Rich metadata for documents including quality signals and classification",
      "type": "object",
      "required": ["library_name", "doc_type"],
      "properties": {
        "library_name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 200,
          "description": "Human-readable library name"
        },
        "description": {
          "type": "string",
          "maxLength": 1000,
          "description": "Library description"
        },
        "doc_type": {
          "type": "string",
          "enum": ["api", "guide", "tutorial", "reference", "example", "changelog", "readme", "faq", "other"],
          "description": "Primary document type classification"
        },
        "category": {
          "type": "string",
          "enum": ["web_framework", "database", "machine_learning", "utility", "testing", "ui_framework", "data_processing", "security", "deployment", "other"],
          "description": "Library category classification"
        },
        "language": {
          "type": "string",
          "pattern": "^[a-z]{2,20}$",
          "description": "Primary programming language (lowercase)",
          "examples": ["python", "javascript", "rust", "go", "java"]
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z]{2,20}$"
          },
          "uniqueItems": true,
          "maxItems": 10,
          "description": "Additional supported languages"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{1,30}$"
          },
          "uniqueItems": true,
          "maxItems": 20,
          "description": "Searchable tags for categorization"
        },
        "quality_signals": {
          "type": "object",
          "properties": {
            "trust_score": {
              "type": "number",
              "minimum": 0,
              "maximum": 10,
              "description": "Computed trust score based on various factors"
            },
            "star_count": {
              "type": "integer",
              "minimum": 0,
              "description": "GitHub star count"
            },
            "download_count": {
              "type": "integer",
              "minimum": 0,
              "description": "Package download count"
            },
            "contributor_count": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of contributors"
            },
            "last_release": {
              "type": "string",
              "format": "date",
              "description": "Date of last release"
            },
            "maintenance_score": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Maintenance activity score"
            }
          }
        },
        "source_info": {
          "type": "object",
          "properties": {
            "repository_url": {
              "type": "string",
              "format": "uri",
              "description": "Source repository URL"
            },
            "documentation_url": {
              "type": "string",
              "format": "uri",
              "description": "Official documentation URL"
            },
            "homepage_url": {
              "type": "string",
              "format": "uri",
              "description": "Project homepage URL"
            },
            "license": {
              "type": "string",
              "maxLength": 50,
              "description": "License identifier (SPDX format)"
            }
          }
        },
        "custom_fields": {
          "type": "object",
          "description": "User-defined custom metadata fields",
          "additionalProperties": {
            "anyOf": [
              {"type": "string"},
              {"type": "number"},
              {"type": "boolean"},
              {"type": "array"},
              {"type": "object"}
            ]
          }
        }
      },
      "additionalProperties": false
    },

    "ProcessingStats": {
      "$id": "#/definitions/ProcessingStats",
      "title": "Processing Statistics",
      "description": "Detailed statistics about document processing",
      "type": "object",
      "properties": {
        "total_tokens": {
          "type": "integer",
          "minimum": 0,
          "description": "Total token count in document"
        },
        "chunks_created": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of chunks created"
        },
        "embeddings_generated": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of embeddings generated"
        },
        "vectors_stored": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of vectors successfully stored"
        },
        "processing_time_seconds": {
          "type": "number",
          "minimum": 0,
          "description": "Total processing time"
        },
        "stage_timings": {
          "type": "object",
          "properties": {
            "parsing_seconds": {"type": "number", "minimum": 0},
            "chunking_seconds": {"type": "number", "minimum": 0},
            "embedding_seconds": {"type": "number", "minimum": 0},
            "storage_seconds": {"type": "number", "minimum": 0}
          }
        },
        "memory_usage_mb": {
          "type": "number",
          "minimum": 0,
          "description": "Peak memory usage during processing"
        },
        "cache_hits": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of embedding cache hits"
        },
        "api_calls": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of external API calls made"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessingError"
          },
          "description": "Processing errors encountered"
        }
      }
    },

    "ProcessingError": {
      "$id": "#/definitions/ProcessingError",
      "title": "Processing Error",
      "description": "Error information during document processing",
      "type": "object",
      "required": ["error_code", "message", "timestamp"],
      "properties": {
        "error_code": {
          "type": "string",
          "enum": [
            "PARSE_ERROR",
            "CHUNK_ERROR", 
            "EMBEDDING_ERROR",
            "STORAGE_ERROR",
            "VALIDATION_ERROR",
            "TIMEOUT_ERROR",
            "MEMORY_ERROR",
            "API_ERROR",
            "NETWORK_ERROR"
          ]
        },
        "message": {
          "type": "string",
          "maxLength": 500,
          "description": "Human-readable error message"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "stage": {
          "type": "string",
          "enum": ["parsing", "chunking", "embedding", "storage"]
        },
        "details": {
          "type": "object",
          "description": "Additional error context",
          "additionalProperties": true
        },
        "retry_count": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "recoverable": {
          "type": "boolean",
          "description": "Whether error is potentially recoverable"
        }
      }
    },

    "ChunkModel": {
      "$id": "#/definitions/ChunkModel",
      "title": "Document Chunk Model",
      "description": "Individual text chunk created from document segmentation",
      "type": "object",
      "required": ["chunk_id", "document_id", "content", "chunk_index", "metadata"],
      "properties": {
        "chunk_id": {
          "type": "string",
          "pattern": "^chunk_[a-zA-Z0-9_-]{8,64}$",
          "description": "Unique chunk identifier"
        },
        "document_id": {
          "type": "string",
          "pattern": "^doc_[a-zA-Z0-9_-]{8,64}$",
          "description": "Parent document identifier"
        },
        "content": {
          "type": "string",
          "minLength": 1,
          "maxLength": 8000,
          "description": "Text content of the chunk"
        },
        "content_hash": {
          "type": "string",
          "pattern": "^[a-f0-9]{64}$",
          "description": "SHA-256 hash of content for deduplication"
        },
        "chunk_index": {
          "type": "integer",
          "minimum": 0,
          "description": "Sequential index within parent document"
        },
        "total_chunks": {
          "type": "integer",
          "minimum": 1,
          "description": "Total number of chunks in parent document"
        },
        "token_count": {
          "type": "integer",
          "minimum": 1,
          "description": "Number of tokens in chunk content"
        },
        "character_count": {
          "type": "integer",
          "minimum": 1,
          "description": "Number of characters in chunk content"
        },
        "overlap_info": {
          "type": "object",
          "properties": {
            "has_previous_overlap": {
              "type": "boolean",
              "description": "Whether chunk has overlap with previous chunk"
            },
            "has_next_overlap": {
              "type": "boolean", 
              "description": "Whether chunk has overlap with next chunk"
            },
            "overlap_tokens": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of overlapping tokens"
            }
          }
        },
        "boundaries": {
          "type": "object",
          "properties": {
            "start_token": {
              "type": "integer",
              "minimum": 0,
              "description": "Starting token position in original document"
            },
            "end_token": {
              "type": "integer",
              "minimum": 0,
              "description": "Ending token position in original document"
            },
            "boundary_type": {
              "type": "string",
              "enum": ["sentence", "paragraph", "section", "code_block", "token_limit"],
              "description": "Type of boundary used for chunking"
            }
          }
        },
        "metadata": {
          "type": "object",
          "required": ["library_id"],
          "properties": {
            "library_id": {
              "type": "string"
            },
            "section": {
              "type": "string",
              "maxLength": 100,
              "description": "Document section containing this chunk"
            },
            "subsection": {
              "type": "string", 
              "maxLength": 100,
              "description": "Document subsection"
            },
            "doc_type": {
              "type": "string",
              "enum": ["api", "guide", "tutorial", "reference", "example", "changelog", "readme", "faq", "other"]
            },
            "language": {
              "type": "string",
              "pattern": "^[a-z]{2,20}$"
            },
            "code_language": {
              "type": "string",
              "description": "Programming language if chunk contains code"
            },
            "chunk_type": {
              "type": "string",
              "enum": ["text", "code", "mixed", "table", "list"],
              "description": "Primary content type of chunk"
            },
            "heading_context": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 5,
              "description": "Hierarchical heading context"
            }
          },
          "additionalProperties": true
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "embedding_status": {
          "type": "string",
          "enum": ["pending", "processing", "completed", "failed"],
          "description": "Status of embedding generation for this chunk"
        }
      },
      "additionalProperties": false
    },

    "VectorModel": {
      "$id": "#/definitions/VectorModel",
      "title": "Vector Embedding Model",
      "description": "Vector embedding representation of text chunks",
      "type": "object",
      "required": ["vector_id", "chunk_id", "embedding", "model_info"],
      "properties": {
        "vector_id": {
          "type": "string",
          "pattern": "^vec_[a-zA-Z0-9_-]{8,64}$",
          "description": "Unique vector identifier"
        },
        "chunk_id": {
          "type": "string",
          "pattern": "^chunk_[a-zA-Z0-9_-]{8,64}$",
          "description": "Associated chunk identifier"
        },
        "embedding": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "minItems": 2048,
          "maxItems": 2048,
          "description": "2048-dimensional vector embedding"
        },
        "model_info": {
          "type": "object",
          "required": ["model_name", "model_version"],
          "properties": {
            "model_name": {
              "type": "string",
              "enum": ["voyage-code-3"],
              "description": "Embedding model identifier"
            },
            "model_version": {
              "type": "string",
              "pattern": "^\\d+\\.\\d+(\\.\\d+)?$",
              "description": "Model version number"
            },
            "input_type": {
              "type": "string",
              "enum": ["document", "query"],
              "description": "Input type used for embedding generation"
            },
            "tokenizer": {
              "type": "string",
              "description": "Tokenizer used by model"
            }
          }
        },
        "generation_info": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "generation_time_ms": {
              "type": "number",
              "minimum": 0,
              "description": "Time taken to generate embedding"
            },
            "cache_hit": {
              "type": "boolean",
              "description": "Whether embedding was retrieved from cache"
            },
            "api_call_id": {
              "type": "string",
              "description": "External API call identifier for tracing"
            },
            "batch_id": {
              "type": "string",
              "description": "Batch processing identifier"
            }
          }
        },
        "quality_metrics": {
          "type": "object",
          "properties": {
            "norm": {
              "type": "number",
              "minimum": 0,
              "description": "Vector norm (magnitude)"
            },
            "dimension_variance": {
              "type": "number",
              "minimum": 0,
              "description": "Variance across vector dimensions"
            },
            "zero_dimensions": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of zero-valued dimensions"
            }
          }
        },
        "storage_info": {
          "type": "object",
          "properties": {
            "stored_in_qdrant": {
              "type": "boolean",
              "description": "Whether vector is stored in Qdrant"
            },
            "qdrant_point_id": {
              "type": "string",
              "description": "Qdrant point identifier"
            },
            "collection_name": {
              "type": "string",
              "description": "Qdrant collection name"
            },
            "storage_timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "additionalProperties": false
    },

    "SearchQueryModel": {
      "$id": "#/definitions/SearchQueryModel",
      "title": "Search Query Model",
      "description": "Structured representation of search queries with analysis",
      "type": "object",
      "required": ["query_id", "query_text", "parameters"],
      "properties": {
        "query_id": {
          "type": "string",
          "pattern": "^query_[a-zA-Z0-9_-]{8,32}$",
          "description": "Unique query identifier for tracking"
        },
        "query_text": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1000,
          "description": "Original query text"
        },
        "normalized_query": {
          "type": "string",
          "maxLength": 1000,
          "description": "Normalized version of query for processing"
        },
        "parameters": {
          "type": "object",
          "required": ["search_type"],
          "properties": {
            "search_type": {
              "type": "string",
              "enum": ["semantic", "keyword", "hybrid"]
            },
            "limit": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "threshold": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.7
            },
            "filters": {
              "$ref": "#/definitions/SearchFilters"
            },
            "rerank": {
              "type": "boolean",
              "default": true
            },
            "include_highlights": {
              "type": "boolean",
              "default": true
            }
          }
        },
        "analysis": {
          "type": "object",
          "properties": {
            "intent": {
              "type": "string",
              "enum": ["informational", "procedural", "api_reference", "troubleshooting", "example", "comparison"],
              "description": "Detected query intent"
            },
            "complexity": {
              "type": "string",
              "enum": ["simple", "moderate", "complex"],
              "description": "Query complexity assessment"
            },
            "entities": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {"type": "string"},
                  "type": {"type": "string"},
                  "confidence": {"type": "number", "minimum": 0, "maximum": 1}
                }
              },
              "description": "Extracted entities from query"
            },
            "keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Extracted keywords"
            },
            "language": {
              "type": "string",
              "pattern": "^[a-z]{2}$",
              "description": "Detected query language"
            }
          }
        },
        "execution_info": {
          "type": "object",
          "properties": {
            "timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "user_id": {
              "type": "string",
              "description": "User identifier (if authenticated)"
            },
            "session_id": {
              "type": "string",
              "description": "Session identifier"
            },
            "ip_address": {
              "type": "string",
              "format": "ipv4",
              "description": "Client IP address"
            },
            "user_agent": {
              "type": "string",
              "maxLength": 500,
              "description": "Client user agent"
            }
          }
        }
      },
      "additionalProperties": false
    },

    "SearchFilters": {
      "$id": "#/definitions/SearchFilters",
      "title": "Search Filters",
      "description": "Metadata-based search filters",
      "type": "object",
      "properties": {
        "library_id": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{1,100}$"
          },
          "uniqueItems": true,
          "maxItems": 50
        },
        "doc_type": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["api", "guide", "tutorial", "reference", "example", "changelog", "readme", "faq", "other"]
          },
          "uniqueItems": true
        },
        "language": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-z]{2,20}$"
          },
          "uniqueItems": true
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["web_framework", "database", "machine_learning", "utility", "testing", "ui_framework", "data_processing", "security", "deployment", "other"]
          },
          "uniqueItems": true
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{1,30}$"
          },
          "uniqueItems": true,
          "maxItems": 20
        },
        "date_range": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "format": "date-time"
            },
            "end": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": false
        },
        "trust_score_range": {
          "type": "object",
          "properties": {
            "min": {
              "type": "number",
              "minimum": 0,
              "maximum": 10
            },
            "max": {
              "type": "number",
              "minimum": 0,
              "maximum": 10
            }
          },
          "additionalProperties": false
        },
        "custom_filters": {
          "type": "object",
          "description": "User-defined filter criteria",
          "additionalProperties": {
            "anyOf": [
              {"type": "string"},
              {"type": "number"},
              {"type": "boolean"},
              {"type": "array"}
            ]
          }
        }
      },
      "additionalProperties": false
    },

    "SearchResultModel": {
      "$id": "#/definitions/SearchResultModel",
      "title": "Search Result Model",
      "description": "Individual search result with scoring and metadata",
      "type": "object",
      "required": ["result_id", "chunk_id", "content", "score", "metadata"],
      "properties": {
        "result_id": {
          "type": "string",
          "pattern": "^result_[a-zA-Z0-9_-]{8,32}$",
          "description": "Unique result identifier for this search"
        },
        "chunk_id": {
          "type": "string",
          "pattern": "^chunk_[a-zA-Z0-9_-]{8,64}$",
          "description": "Source chunk identifier"
        },
        "content": {
          "type": "string",
          "minLength": 1,
          "maxLength": 8000,
          "description": "Text content of the result"
        },
        "score": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Overall relevance score"
        },
        "score_breakdown": {
          "type": "object",
          "properties": {
            "semantic_score": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Semantic similarity score"
            },
            "keyword_score": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Keyword matching score"
            },
            "quality_boost": {
              "type": "number",
              "minimum": 0,
              "maximum": 2,
              "description": "Quality-based score boost factor"
            },
            "recency_boost": {
              "type": "number",
              "minimum": 0,
              "maximum": 2,
              "description": "Recency-based score boost factor"
            }
          }
        },
        "metadata": {
          "type": "object",
          "required": ["library_id", "doc_type"],
          "properties": {
            "library_id": {"type": "string"},
            "library_name": {"type": "string"},
            "version": {"type": "string"},
            "doc_type": {
              "type": "string",
              "enum": ["api", "guide", "tutorial", "reference", "example", "changelog", "readme", "faq", "other"]
            },
            "section": {"type": "string"},
            "subsection": {"type": "string"},
            "chunk_index": {"type": "integer", "minimum": 0},
            "total_chunks": {"type": "integer", "minimum": 1},
            "language": {"type": "string"},
            "heading_context": {
              "type": "array",
              "items": {"type": "string"}
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "URL to original documentation"
            }
          },
          "additionalProperties": true
        },
        "highlights": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["text", "start", "end"],
            "properties": {
              "text": {
                "type": "string",
                "description": "Highlighted text snippet"
              },
              "start": {
                "type": "integer",
                "minimum": 0,
                "description": "Start position in content"
              },
              "end": {
                "type": "integer",
                "minimum": 0,
                "description": "End position in content"
              },
              "type": {
                "type": "string",
                "enum": ["exact_match", "semantic_match", "keyword_match"],
                "description": "Type of highlight"
              }
            }
          },
          "maxItems": 10,
          "description": "Highlighted text snippets"
        },
        "context": {
          "type": "object",
          "properties": {
            "previous_chunk": {
              "type": "string",
              "description": "Content from previous chunk for context"
            },
            "next_chunk": {
              "type": "string", 
              "description": "Content from next chunk for context"
            },
            "related_sections": {
              "type": "array",
              "items": {"type": "string"},
              "description": "Related document sections"
            }
          }
        },
        "relevance_explanation": {
          "type": "object",
          "properties": {
            "matching_terms": {
              "type": "array",
              "items": {"type": "string"},
              "description": "Terms that matched in the content"
            },
            "semantic_similarity": {
              "type": "string",
              "description": "Explanation of semantic similarity"
            },
            "quality_factors": {
              "type": "array",
              "items": {"type": "string"},
              "description": "Quality factors that boosted the score"
            }
          }
        }
      },
      "additionalProperties": false
    },

    "ConfigurationModel": {
      "$id": "#/definitions/ConfigurationModel",
      "title": "System Configuration Model",
      "description": "Complete system configuration schema with validation",
      "type": "object",
      "required": ["version", "search", "ingestion", "embedding", "vector_store"],
      "properties": {
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$",
          "description": "Configuration schema version"
        },
        "search": {
          "type": "object",
          "required": ["hybrid_weights", "default_threshold"],
          "properties": {
            "hybrid_weights": {
              "type": "object",
              "required": ["semantic", "keyword"],
              "properties": {
                "semantic": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.7
                },
                "keyword": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "default": 0.3
                }
              },
              "additionalProperties": false
            },
            "default_threshold": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.7
            },
            "max_results": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "cache_ttl_seconds": {
              "type": "integer",
              "minimum": 0,
              "default": 3600
            },
            "reranking_enabled": {
              "type": "boolean",
              "default": true
            }
          }
        },
        "ingestion": {
          "type": "object",
          "required": ["chunk_size", "chunk_overlap"],
          "properties": {
            "chunk_size": {
              "type": "integer",
              "minimum": 100,
              "maximum": 4000,
              "default": 1000,
              "description": "Token count per chunk"
            },
            "chunk_overlap": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1000,
              "default": 200,
              "description": "Overlap tokens between chunks"
            },
            "max_chunks_per_document": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000,
              "default": 1000
            },
            "max_concurrent_jobs": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 5
            },
            "auto_process": {
              "type": "boolean",
              "default": true
            },
            "quality_threshold": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.5,
              "description": "Minimum quality score for processing"
            }
          }
        },
        "embedding": {
          "type": "object",
          "required": ["model", "batch_size"],
          "properties": {
            "model": {
              "type": "string",
              "enum": ["voyage-code-3"],
              "default": "voyage-code-3"
            },
            "batch_size": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "cache_enabled": {
              "type": "boolean",
              "default": true
            },
            "cache_ttl_days": {
              "type": "integer",
              "minimum": 1,
              "maximum": 365,
              "default": 7
            },
            "max_cache_size_gb": {
              "type": "number",
              "minimum": 0.1,
              "maximum": 100,
              "default": 10
            },
            "rate_limit_per_minute": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 300
            }
          }
        },
        "vector_store": {
          "type": "object",
          "required": ["provider", "collection_name"],
          "properties": {
            "provider": {
              "type": "string",
              "enum": ["qdrant"],
              "default": "qdrant"
            },
            "host": {
              "type": "string",
              "default": "localhost"
            },
            "port": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535,
              "default": 6333
            },
            "collection_name": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_-]{1,64}$",
              "default": "contexter_docs"
            },
            "vector_size": {
              "type": "integer",
              "enum": [2048],
              "default": 2048
            },
            "distance_metric": {
              "type": "string",
              "enum": ["cosine", "euclidean", "dot"],
              "default": "cosine"
            },
            "hnsw_config": {
              "type": "object",
              "properties": {
                "m": {
                  "type": "integer",
                  "minimum": 4,
                  "maximum": 64,
                  "default": 16
                },
                "ef_construct": {
                  "type": "integer",
                  "minimum": 4,
                  "maximum": 1000,
                  "default": 200
                },
                "max_indexing_threads": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 64,
                  "default": 0
                }
              }
            }
          }
        },
        "monitoring": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "default": true
            },
            "metrics_port": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535,
              "default": 8080
            },
            "health_check_interval_seconds": {
              "type": "integer",
              "minimum": 10,
              "maximum": 3600,
              "default": 300
            },
            "log_level": {
              "type": "string",
              "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
              "default": "INFO"
            }
          }
        }
      },
      "additionalProperties": false
    },

    "MetricsModel": {
      "$id": "#/definitions/MetricsModel",
      "title": "System Metrics Model",
      "description": "Comprehensive system performance and operational metrics",
      "type": "object",
      "required": ["timestamp", "search_metrics", "ingestion_metrics", "vector_metrics", "system_metrics"],
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "collection_period_seconds": {
          "type": "integer",
          "minimum": 1,
          "description": "Metrics collection period"
        },
        "search_metrics": {
          "type": "object",
          "required": ["total_searches", "avg_latency_ms"],
          "properties": {
            "total_searches": {
              "type": "integer",
              "minimum": 0
            },
            "successful_searches": {
              "type": "integer",
              "minimum": 0
            },
            "failed_searches": {
              "type": "integer",
              "minimum": 0
            },
            "avg_latency_ms": {
              "type": "number",
              "minimum": 0
            },
            "p50_latency_ms": {
              "type": "number",
              "minimum": 0
            },
            "p95_latency_ms": {
              "type": "number",
              "minimum": 0
            },
            "p99_latency_ms": {
              "type": "number",
              "minimum": 0
            },
            "cache_hit_rate": {
              "type": "number",
              "minimum": 0,
              "maximum": 1
            },
            "search_types": {
              "type": "object",
              "properties": {
                "semantic": {"type": "integer", "minimum": 0},
                "keyword": {"type": "integer", "minimum": 0},
                "hybrid": {"type": "integer", "minimum": 0}
              }
            }
          }
        },
        "ingestion_metrics": {
          "type": "object",
          "required": ["documents_processed", "avg_processing_time_seconds"],
          "properties": {
            "documents_queued": {
              "type": "integer",
              "minimum": 0
            },
            "documents_processing": {
              "type": "integer",
              "minimum": 0
            },
            "documents_processed": {
              "type": "integer",
              "minimum": 0
            },
            "documents_failed": {
              "type": "integer",
              "minimum": 0
            },
            "avg_processing_time_seconds": {
              "type": "number",
              "minimum": 0
            },
            "queue_length": {
              "type": "integer",
              "minimum": 0
            },
            "workers_active": {
              "type": "integer",
              "minimum": 0
            },
            "throughput_docs_per_minute": {
              "type": "number",
              "minimum": 0
            },
            "chunks_created": {
              "type": "integer",
              "minimum": 0
            },
            "embeddings_generated": {
              "type": "integer",
              "minimum": 0
            }
          }
        },
        "vector_metrics": {
          "type": "object",
          "required": ["total_vectors", "storage_size_mb"],
          "properties": {
            "total_vectors": {
              "type": "integer",
              "minimum": 0
            },
            "indexed_vectors": {
              "type": "integer",
              "minimum": 0
            },
            "storage_size_mb": {
              "type": "number",
              "minimum": 0
            },
            "collection_count": {
              "type": "integer",
              "minimum": 0
            },
            "avg_query_time_ms": {
              "type": "number",
              "minimum": 0
            },
            "index_optimization_last_run": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "embedding_metrics": {
          "type": "object",
          "properties": {
            "api_calls_total": {
              "type": "integer",
              "minimum": 0
            },
            "api_calls_successful": {
              "type": "integer",
              "minimum": 0
            },
            "api_calls_failed": {
              "type": "integer",
              "minimum": 0
            },
            "cache_hits": {
              "type": "integer",
              "minimum": 0
            },
            "cache_misses": {
              "type": "integer",
              "minimum": 0
            },
            "avg_batch_size": {
              "type": "number",
              "minimum": 0
            },
            "cost_usd": {
              "type": "number",
              "minimum": 0
            }
          }
        },
        "system_metrics": {
          "type": "object",
          "required": ["memory_usage_mb", "cpu_usage_percent"],
          "properties": {
            "memory_usage_mb": {
              "type": "number",
              "minimum": 0
            },
            "memory_available_mb": {
              "type": "number",
              "minimum": 0
            },
            "cpu_usage_percent": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            },
            "disk_usage_mb": {
              "type": "number",
              "minimum": 0
            },
            "disk_available_mb": {
              "type": "number",
              "minimum": 0
            },
            "active_connections": {
              "type": "integer",
              "minimum": 0
            },
            "uptime_seconds": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "additionalProperties": false
    }
  },

  "examples": {
    "complete_document": {
      "document_id": "doc_fastapi_0.104.1",
      "library_id": "fastapi",
      "version": "0.104.1",
      "content": {
        "sections": {
          "introduction": "FastAPI is a modern, fast web framework for building APIs with Python 3.7+ based on standard Python type hints.",
          "features": {
            "fast": "Very high performance, on par with NodeJS and Go",
            "easy": "Easy to learn and use"
          }
        }
      },
      "metadata": {
        "library_name": "FastAPI",
        "doc_type": "guide",
        "category": "web_framework",
        "language": "python",
        "quality_signals": {
          "trust_score": 9.5,
          "star_count": 75000
        }
      },
      "status": "completed"
    },

    "search_request": {
      "query": "How to add authentication to FastAPI endpoints",
      "limit": 10,
      "threshold": 0.7,
      "search_type": "hybrid",
      "filters": {
        "library_id": ["fastapi"],
        "doc_type": ["api", "guide"]
      },
      "include_highlights": true
    },

    "search_result": {
      "result_id": "result_12345",
      "chunk_id": "chunk_fastapi_auth_001",
      "content": "FastAPI provides several ways to handle authentication. The most common approach is using OAuth2 with JWT tokens...",
      "score": 0.92,
      "score_breakdown": {
        "semantic_score": 0.89,
        "keyword_score": 0.95,
        "quality_boost": 1.1
      },
      "metadata": {
        "library_id": "fastapi",
        "library_name": "FastAPI",
        "doc_type": "guide",
        "section": "security"
      },
      "highlights": [
        {
          "text": "**authentication** in **FastAPI**",
          "start": 25,
          "end": 60,
          "type": "exact_match"
        }
      ]
    }
  }
}