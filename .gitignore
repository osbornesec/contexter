# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.
#  For PyCharm Community Edition, use 'PyCharm CE' instead of 'PyCharm'.
.idea/

# Project-specific ignores

# Virtual environments
.venv/
venv/
env/

# Editor directories and files
.vscode/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Application data
downloads/
*.db
*.sqlite
*.sqlite3

# Configuration files with sensitive data
config.yaml
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Log files
*.log
logs/
log/

# Temporary files
tmp/
temp/
.tmp/

# Cache directories
.cache/
cache/
__pycache__/

# Test results and coverage
test_results/
test-reports/
*.xml
htmlcov/

# Development files
.claude/
_anthropics_claude-code/
_coder_claudecode.nvim/
_encode_django-rest-framework/
_m1guelpf_tinyvector/
_tinylibs_tinybench/
react_simple/
react_test/

# Mock implementations (development only)
mock_*.py

# AI documentation work files (keep selective)
ai_docs/deliverables/*/temp/
ai_docs/comms/
ai_docs/prps/temp/

# Vector database files
qdrant_data/
vector_store/
embeddings_cache/

# Storage directories
storage/
.contexter/
contexter_data/

# Backup files
*.bak
*.backup
*~

# Performance and profiling
*.prof
*.pstats
.benchmarks/

# Docker
Dockerfile.dev
docker-compose.override.yml
.dockerignore

# Kubernetes
k8s/secrets/
*.secret.yaml

# Dependencies lock files that might be platform specific
Pipfile.lock
poetry.lock
requirements-dev.lock

# IDE and editor files
*.sublime-project
*.sublime-workspace
.vs/
.vscode/settings.json
.vscode/launch.json

# Documentation build
_build/
docs/build/

# Local development scripts
dev_*.py
local_*.py
debug_*.py

# Credentials and API keys
credentials.json
api_keys.txt
secrets.yaml
.secrets/

# Machine learning models and data
models/
data/
datasets/
*.model
*.pkl
*.pickle

# Large files that shouldn't be in git
*.zip
*.tar.gz
*.rar
*.7z
!requirements.txt
!setup.py
!pyproject.toml

# Node.js (if any frontend components exist)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# System files
*.pid
*.seed
*.pid.lock